AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Agent Builder - Autonomous Software Factory Backend"

Globals:
  Function:
    Timeout: 300
    Runtime: nodejs18.x
    MemorySize: 1024
    Environment:
      Variables:
        NODE_ENV: production
        PROJECTS_TABLE: !Ref ProjectsTable
        USERS_TABLE: !Ref UsersTable
        CONNECTIONS_TABLE: !Ref ConnectionsTable
        MESSAGES_TABLE: !Ref MessagesTable
        AGENTS_TABLE: !Ref AgentsTable
        S3_BUCKET: !Ref FrontendBucket
        WEBSOCKET_API: !Ref WebSocketApi

Parameters:
  Environment:
    Type: String
    AllowedValues: [dev, staging, prod]
    Default: dev

Conditions:
  IsProd: !Equals [!Ref Environment, "prod"]

Resources:
  ProjectsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub projects-${Environment}

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub users-${Environment}

  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub connections-${Environment}

  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub messages-${Environment}

  AgentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub agents-${Environment}

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub agent-builder-${Environment}-${AWS::AccountId}

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Join ["", [!GetAtt FrontendBucket.Arn, "/*"]]

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub agent-builder-${Environment}-userpool

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub agent-builder-${Environment}-client
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      CallbackURLs:
        - !If
          - IsProd
          - "https://app.agent-builder.app/auth/callback"
          - !Sub "https://${Environment}.agent-builder.app/auth/callback"
        - "http://localhost:3000/auth/callback"
      LogoutURLs:
        - !If
          - IsProd
          - "https://app.agent-builder.app/auth/logout"
          - !Sub "https://${Environment}.agent-builder.app/auth/logout"
        - "http://localhost:3000/auth/logout"
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows: [code]
      AllowedOAuthScopes: [openid, email, profile]

  AgentBuilderApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub agent-builder-${Environment}-api
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub agent-builder-${Environment}-ws
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: !Ref Environment
      AutoDeploy: true

Outputs:
  ApiGatewayEndpoint:
    Description: "REST API endpoint"
    Value: !Sub
      - "https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
      - { ApiId: !Ref AgentBuilderApi }

  WebSocketApiEndpoint:
    Description: "WebSocket API endpoint"
    Value: !Sub
      - "wss://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
      - { ApiId: !Ref WebSocketApi }

  FrontendBucketName:
    Description: "Frontend S3 Bucket"
    Value: !Ref FrontendBucket

  CognitoUserPoolId:
    Value: !Ref UserPool

  CognitoUserPoolClientId:
    Value: !Ref UserPoolClient
